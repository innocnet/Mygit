Mybatis    // 2018/5/16  于 lab

1. 快速入门
	1). 添加jar包
		mybatis-3.1.1.jar  //这个比较老了
		mysql-connector-java-5.1.7-bin.jar
	2). 配置conf.xml
		<?xml version="1.0" encoding="UTF-8"?>
			<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
			<configuration>
				<environments default="development">
					<environment id="development">
						<transactionManager type="JDBC" />
						<dataSource type="POOLED">
						  <property name="driver" value="com.mysql.jdbc.Driver" /> 
                          <property name="url" value="jdbc:mysql://localhost:3306/Mybatis?useSSL=false" /> 
                          <property name="username" value="root" /> 
                          <property name="password" value="orcl" /> 
						</dataSource>
					</environment>
				</environments>
				<mappers>
	            	<mapper resource="com/mybatis/entities/userMapper.xml"/>
	            	<mapper class="com.mybatis.entities.Mapper"/>
	            </mappers>
			</configuration>

	3). 配置映射文件
		eg: userMapper.xml
			<?xml version="1.0" encoding="UTF-8"?>
			<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
			<mapper namespace="com.mybatis.entities.userMapper"> 
				<select id="getUser" parameterType="int" resultType="com.mybatis.entities.User">
					select * from users where id = #{id}
				</select>
				
				<delete id="deleteUser" parameterType="int">
					delete from users where id = #{id}
				</delete>
				
				<update id="updateUser" parameterType="com.mybatis.entities.User">
					update users set name=#{name}, age=#{age} where id = #{id}
				</update>
				
				<insert id="insertUser"  parameterType="com.mybatis.entities.User">
					insert into users(name, age) values (#{name}, #{age})
				</insert>
				
				<select id="allUser" resultType="com.mybatis.entities.User">
				 	select * from users
				</select>
				</mapper>

2. 操作数据库表的crud
	1). 通过xml实现

	2). 通过注解实现
		新建接口：eg；userMapper.java
		在主类里；UserMapper userMapper = session.getMapper(.class);

3. 优化
	1). 连接数据库的配置单独放在一个properties文件中;
		//properties文件中配置属性时一定要注意空格
	2). 为实体类定义别名,简化sql映射xml文件中的引用; //在配置文件conf.xml里面写
		<typeAliases>
			<typeAlias type="com.atguigu.ibatis.bean.User" alias="_User"/>
		</typeAliases>

	3). 在src下加入log4j的配置文件,打印日志信息
		配置log4j文件；
		 1.log4j.properties;
				log4j.properties，
				log4j.rootLogger=DEBUG, Console
				#Console
				log4j.appender.Console=org.apache.log4j.ConsoleAppender
				log4j.appender.Console.layout=org.apache.log4j.PatternLayout
				log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n
				log4j.logger.java.sql.ResultSet=INFO
				log4j.logger.org.apache=INFO
				log4j.logger.java.sql.Connection=DEBUG
				log4j.logger.java.sql.Statement=DEBUG
				log4j.logger.java.sql.PreparedStatement=DEBUG
		 2.log4j.xml;
				<?xml version="1.0" encoding="UTF-8" ?>
				<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
				<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
					<appender name="STDOUT" class="org.apache.log4j.ConsoleAppender">
						<layout class="org.apache.log4j.PatternLayout">
							<param name="ConversionPattern" 
								value="%-5p %d{MM-dd HH:mm:ss,SSS} %m  (%F:%L) \n" />
						</layout>
					</appender>
					<logger name="java.sql">
						<level value="debug" />
					</logger>
					<logger name="org.apache.ibatis">
						<level value="debug" />
					</logger>
					<root>
						<level value="debug" />
						<appender-ref ref="STDOUT" />
					</root>
				</log4j:configuration>

4. 解决字段名与实体类属性名不相同的冲突

	方式一: 通过在sql语句中定义别名
	<select id="selectOrder" parameterType="int" resultType="_Order">
		select order_id id, order_no orderNo,order_price price from orders where order_id=#{id}
	</select>
			
	方式二: 通过<resultMap>
	<select id="selectOrderResultMap" parameterType="int" resultMap="orderResultMap">
		select * from orders where order_id=#{id}
	</select>

	<resultMap type="_Order" id="orderResultMap">
		<id property="id" column="order_id"/>
		<result property="orderNo" column="order_no"/>
		<result property="price" column="order_price"/>
	</resultMap>


5. 实现关联表查询

	1). 一对一关联
			<!-- 
			方式一：嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集
			         封装联表查询的数据(去除重复的数据)
			select * from class c, teacher t where c.teacher_id=t.t_id and  c.c_id=1
			-->
			<select id="getClass" parameterType="int" resultMap="ClassResultMap">
				select * from class c, teacher t where c.teacher_id=t.t_id and  c.c_id=#{id}
			</select>
			<resultMap type="_Classes" id="ClassResultMap">
				<id property="id" column="c_id"/>
				<result property="name" column="c_name"/>
				<association property="teacher" javaType="_Teacher">
					<id property="id" column="t_id"/>
					<result property="name" column="t_name"/>
				</association>
			</resultMap>

			<!-- 
			方式二：嵌套查询：通过执行另外一个SQL映射语句来返回预期的复杂类型
				SELECT * FROM class WHERE c_id=1;
				SELECT * FROM teacher WHERE t_id=1   //1 是上一个查询得到的teacher_id的值
			-->

			 <select id="getClass2" parameterType="int" resultMap="ClassResultMap2">
				select * from class where c_id=#{id}
			 </select>
			 <resultMap type="_Classes" id="ClassResultMap2">
				<id property="id" column="c_id"/>
				<result property="name" column="c_name"/>
				<association property="teacher" column="teacher_id" select="getTeacher">
			</association>
			 </resultMap>
			 
			 <select id="getTeacher" parameterType="int" resultType="_Teacher">
				SELECT t_id id, t_name name FROM teacher WHERE t_id=#{id}
			 </select>

	2). 一对多关联
			<!-- 
			方式一: 嵌套结果: 使用嵌套结果映射来处理重复的联合结果的子集
			SELECT * FROM class c, teacher t,student s WHERE c.teacher_id=t.t_id AND c.C_id=s.class_id AND  c.c_id=1
			 -->
			<select id="getClass3" parameterType="int" resultMap="ClassResultMap3">
				select * from class c, teacher t,student s where c.teacher_id=t.t_id and c.C_id=s.class_id and  c.c_id=#{id}
			</select>
			<resultMap type="_Classes" id="ClassResultMap3">
				<id property="id" column="c_id"/>
				<result property="name" column="c_name"/>
				<association property="teacher" column="teacher_id" javaType="_Teacher">
					<id property="id" column="t_id"/>
					<result property="name" column="t_name"/>
				</association>
				<!-- ofType指定students集合中的对象类型 -->
				<collection property="students" ofType="_Student">
					<id property="id" column="s_id"/>
					<result property="name" column="s_name"/>
				</collection>
			</resultMap>

			<!-- 
				方式二：嵌套查询：通过执行另外一个SQL映射语句来返回预期的复杂类型
					SELECT * FROM class WHERE c_id=1;
					SELECT * FROM teacher WHERE t_id=1   //1 是上一个查询得到的teacher_id的值
					SELECT * FROM student WHERE class_id=1  //1是第一个查询得到的c_id字段的值
			 -->
			 <select id="getClass4" parameterType="int" resultMap="ClassResultMap4">
				select * from class where c_id=#{id}
			 </select>
			 <resultMap type="_Classes" id="ClassResultMap4">
				<id property="id" column="c_id"/>
				<result property="name" column="c_name"/>
				<association property="teacher" column="teacher_id" javaType="_Teacher" select="getTeacher2"></association>
				<collection property="students" ofType="_Student" column="c_id" select="getStudent"></collection>
			 </resultMap>
			 
			 <select id="getTeacher2" parameterType="int" resultType="_Teacher">
				SELECT t_id id, t_name name FROM teacher WHERE t_id=#{id}
			 </select>
			 
			 <select id="getStudent" parameterType="int" resultType="_Student">
				SELECT s_id id, s_name name FROM student WHERE class_id=#{id}
			 </select>

6. 动态SQL与模糊查询

			<?xml version="1.0" encoding="UTF-8" ?> 
			<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
				"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
			<mapper namespace="com.atguigu.day03_mybatis.test6.userMapper">
			<select id="getUser" parameterType="com.atguigu.day03_mybatis.test6.ConditionUser" resultType="com.atguigu.day03_mybatis.test6.User">
						select * from d_user where age>=#{minAge} and age&lt;=#{maxAge}
					<if test='name!="%null%"'>and name like #{name}</if>
				</select>
			</mapper>


7. 调用存储过程

8. Mybatis缓存

9. spring集成mybatis
	导入jar包：
		【mybatis】
				mybatis-3.2.0.jar
				mybatis-spring-1.1.1.jar
				log4j-1.2.17.jar
		【spring】
				spring-aop-3.2.0.RELEASE.jar
				spring-beans-3.2.0.RELEASE.jar
				spring-context-3.2.0.RELEASE.jar
				spring-core-3.2.0.RELEASE.jar
				spring-expression-3.2.0.RELEASE.jar
				spring-jdbc-3.2.0.RELEASE.jar
				spring-test-3.2.4.RELEASE.jar
				spring-tx-3.2.0.RELEASE.jar

				aopalliance-1.0.jar
				cglib-nodep-2.2.3.jar
				commons-logging-1.1.1.jar
		【MYSQL驱动包】
		mysql-connector-java-5.0.4-bin.jar
	1). 接口和映射文件； userMapper.xml写在对应的包下；
				<?xml version="1.0" encoding="UTF-8"?>
				<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
				<mapper namespace="com.ms.mapper.UserMapper"> 

					<select id="save" parameterType="User">
						insert into s_user(user_name, user_birthday, user_salary) 
						values (#{name}, #{birthday},#{salary})
					</select>

					<select id="update" >
						update s_user set user_name = #{name}, user_birthday=#{birthday}, user_salary=#{salary} where user_id = #{id}
					</select>
					
					<select id="delete"  parameterType="int">
						delete from s_user where user_id = #{id}
					</select>
					<select id="findById" parameterType="int" resultType="User">
						select user_name name,user_birthday birthday, user_salary salary from s_user where user_id = #{id}
					</select>
					<select id="findAll" resultType="User">
						select user_name name,user_birthday birthday, user_salary salary from s_user 
					</select>

				</mapper>
	2). bean配置文件  //写在src下， 类路径下；

				<?xml version="1.0" encoding="UTF-8"?>
				<beans xmlns="http://www.springframework.org/schema/beans" 
					xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
					xmlns:p="http://www.springframework.org/schema/p" 
					xmlns:context="http://www.springframework.org/schema/context"
					xmlns:tx="http://www.springframework.org/schema/tx"
					xsi:schemaLocation="
						http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
					<!-- 1. 数据源 : DriverManagerDataSource -->
					<bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
						<property name="username" value="root"></property>
					    <property name="password" value="orcl"></property>
						<property name="url" value="jdbc:mysql://localhost:3306/Mybatis?useSSL=false"></property>
						<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
					</bean>
					<!-- 
						2. mybatis的SqlSession的工厂: SqlSessionFactoryBean 
							dataSource / typeAliasesPackage
					-->
					<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
						<property name="dataSource" ref="datasource"></property>
						<property name="typeAliasesPackage" value="com.ms.domain"></property>
					</bean>
					
					<!-- 
						3. mybatis自动扫描加载Sql映射文件 : MapperScannerConfigurer 
							sqlSessionFactory / basePackage
					-->
					<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
						<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
						<property name="basePackage" value="com.ms.mapper"></property>
					</bean>
					
					<!-- 4. 事务管理 : DataSourceTransactionManager -->
					<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
						<property name="dataSource" ref="datasource"></property>
					</bean>
					
					<!-- 5. 使用声明式事务 -->
					<tx:annotation-driven transaction-manager="txManager"/>

				</beans>

	3). mybaits配置文件  //写在src下， 类路径下；这里面没什么内容；

	4). 配置log4j.xml 日志文件

					<?xml version="1.0" encoding="UTF-8"?>
					<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
					<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
						<appender name="STDOUT" class="org.apache.log4j.ConsoleAppender">
							<layout class="org.apache.log4j.PatternLayout">
								<param name="ConversionPattern" 
									value="%-5p %d{MM-dd HH:mm:ss,SSS} %m  (%F:%L) \n" />
							</layout>
						</appender>
						<logger name="java.sql" >
							<level value="debug" />
						</logger>
						<logger name="org.apache.ibatis">
							<level value="debug" />
						</logger>
						<root>
							<level value="debug" />
							<appender-ref ref="STDOUT" />
						</root>
					</log4j:configuration>




																										2018/5/22 于 lab